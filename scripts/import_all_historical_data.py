#!/usr/bin/env python3
"""
Script para importar TODAS as 62 linhas hist√≥ricas do Google Forms
"""

import os
import sys
from pathlib import Path
from datetime import datetime, timedelta

# Adicionar o diret√≥rio backend ao path
sys.path.append(str(Path(__file__).parent / "backend"))

try:
    from backend.database.firebase_connection import firebase_manager
    from backend.services.google_forms_sync import GoogleFormsSync
    from backend.core.config import settings
    print("‚úÖ M√≥dulos importados com sucesso")
except ImportError as e:
    print(f"‚ùå Erro ao importar m√≥dulos: {e}")
    sys.exit(1)

def import_all_historical_data():
    """Importa TODAS as linhas hist√≥ricas do Google Forms"""
    try:
        print("üì• Importando TODAS as linhas hist√≥ricas...")
        
        # Criar inst√¢ncia do sincronizador
        sync_service = GoogleFormsSync()
        
        if not sync_service.sheets_service or not settings.GOOGLE_SHEETS_ID:
            print("‚ùå Google Sheets n√£o configurado")
            return False
        
        # Buscar TODOS os dados da planilha (sem filtro de data)
        range_name = f"{settings.GOOGLE_SHEETS_NAME}!A:Z"
        
        result = sync_service.sheets_service.spreadsheets().values().get(
            spreadsheetId=settings.GOOGLE_SHEETS_ID,
            range=range_name
        ).execute()
        
        values = result.get('values', [])
        if not values:
            print("‚ùå Nenhum dado encontrado na planilha")
            return False
        
        # Primeira linha s√£o os cabe√ßalhos
        headers = values[0]
        data_rows = values[1:]
        
        print(f"üìä Encontradas {len(data_rows)} linhas TOTAIS na planilha")
        print(f"üìã Cabe√ßalhos: {headers}")
        
        # Converter TODAS as linhas em respostas
        all_responses = []
        
        for i, row in enumerate(data_rows, 1):
            # Preencher colunas faltantes com strings vazias
            while len(row) < len(headers):
                row.append("")
            
            response_dict = dict(zip(headers, row))
            
            # Tentar extrair timestamp
            timestamp_str = response_dict.get('Timestamp', response_dict.get('Carimbo de data/hora', ''))
            response_time = sync_service._parse_date_from_sheets(timestamp_str)
            
            if not response_time:
                response_time = datetime.now() - timedelta(days=i)  # Data fict√≠cia se n√£o conseguir parsear
            
            all_responses.append({
                'raw_data': response_dict,
                'timestamp': response_time,
                'row_number': i
            })
        
        print(f"‚úÖ Preparadas {len(all_responses)} respostas para importa√ß√£o")
        
        # Salvar TODAS no Firebase
        saved_count = 0
        errors = []
        
        for response_data in all_responses:
            try:
                suggestion = sync_service._map_form_to_suggestion(response_data)
                
                # Adicionar identificador √∫nico para evitar duplicatas
                suggestion['google_forms_row'] = response_data['row_number']
                suggestion['import_batch'] = f"historical_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                
                # Verificar se j√° existe (por row number)
                existing = firebase_manager.query_collection("sugestoes", [
                    ("google_forms_row", "==", response_data['row_number'])
                ])
                
                if existing["success"] and len(existing["data"]) > 0:
                    print(f"‚ö†Ô∏è Linha {response_data['row_number']} j√° importada")
                    continue
                
                # Salvar no Firebase
                result = firebase_manager.create_document("sugestoes", suggestion)
                
                if result["success"]:
                    saved_count += 1
                    print(f"‚úÖ Linha {response_data['row_number']}: {suggestion['titulo']}")
                    
                    # Log da a√ß√£o
                    firebase_manager.create_document("logs", {
                        "user_id": None,
                        "action": "IMPORT_HISTORICAL_DATA",
                        "details": f"Importada linha {response_data['row_number']}: {suggestion['titulo']}",
                        "source": "historical_import",
                        "created_at": datetime.now()
                    })
                else:
                    error_msg = f"Erro linha {response_data['row_number']}: {result.get('error')}"
                    print(f"‚ùå {error_msg}")
                    errors.append(error_msg)
                    
            except Exception as e:
                error_msg = f"Exce√ß√£o linha {response_data.get('row_number', '?')}: {e}"
                print(f"‚ùå {error_msg}")
                errors.append(error_msg)
        
        print(f"\n‚úÖ IMPORTA√á√ÉO CONCLU√çDA:")
        print(f"   ‚Ä¢ Total de linhas: {len(all_responses)}")
        print(f"   ‚Ä¢ Importadas com sucesso: {saved_count}")
        print(f"   ‚Ä¢ Erros: {len(errors)}")
        
        if errors:
            print(f"\n‚ö†Ô∏è ERROS ENCONTRADOS:")
            for error in errors[:5]:  # Mostrar apenas os primeiros 5 erros
                print(f"   ‚Ä¢ {error}")
            if len(errors) > 5:
                print(f"   ‚Ä¢ ... e mais {len(errors) - 5} erros")
        
        return saved_count > 0
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o hist√≥rica: {e}")
        return False

def clean_all_suggestions():
    """Limpa TODAS as sugest√µes antes da reimporta√ß√£o"""
    try:
        print("üßπ Limpando TODAS as sugest√µes existentes...")
        
        # For√ßar inicializa√ß√£o
        firebase_manager._ensure_initialized()
        
        # Buscar todas as sugest√µes
        result = firebase_manager.query_collection("sugestoes")
        
        if not result['success']:
            print("‚ö†Ô∏è Nenhuma sugest√£o encontrada para limpar")
            return True
        
        suggestions = result.get('data', [])
        deleted_count = 0
        
        for suggestion in suggestions:
            suggestion_id = suggestion.get('id')
            if suggestion_id:
                delete_result = firebase_manager.delete_document("sugestoes", suggestion_id)
                if delete_result.get("success"):
                    deleted_count += 1
        
        print(f"‚úÖ {deleted_count} sugest√µes removidas")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao limpar sugest√µes: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("="*80)
    print("üìä IMPORTA√á√ÉO HIST√ìRICA COMPLETA - GOOGLE FORMS")
    print("="*80)
    print()
    print("Este script ir√°:")
    print("1. Limpar TODAS as sugest√µes existentes no Firebase")
    print("2. Importar TODAS as 62 linhas hist√≥ricas do Google Forms")
    print("3. Aplicar o mapeamento correto para cada campo")
    print("4. Otimizar dados para consultas (FKs)")
    print()
    
    confirm = input("‚ö†Ô∏è  ATEN√á√ÉO: Isto apagar√° todos os dados existentes! Continuar? (s/N): ").strip().lower()
    if confirm != 's':
        print("‚ùå Opera√ß√£o cancelada")
        return
    
    print("\nüöÄ Iniciando importa√ß√£o hist√≥rica completa...")
    
    # Passo 1: Limpar TODOS os dados existentes
    if not clean_all_suggestions():
        print("‚ùå Falha na limpeza")
        return
    
    # Passo 2: Importar TODAS as linhas hist√≥ricas
    if not import_all_historical_data():
        print("‚ùå Falha na importa√ß√£o hist√≥rica")
        return
    
    print("\n" + "="*80)
    print("üéâ IMPORTA√á√ÉO HIST√ìRICA CONCLU√çDA COM SUCESSO!")
    print("="*80)
    print()
    print("üìä TODOS os dados hist√≥ricos foram importados:")
    print("   ‚Ä¢ 62 linhas do Google Forms processadas")
    print("   ‚Ä¢ Mapeamento correto aplicado")
    print("   ‚Ä¢ Campos otimizados para consultas")
    print("   ‚Ä¢ FKs configuradas para performance")
    print()
    print("üîç Estrutura final dos dados:")
    print("   ‚Ä¢ V√≠nculo Institucional ‚Üí tipo_usuario + nome")
    print("   ‚Ä¢ Institui√ß√£o ‚Üí setor_origem + instituicao (FK)")
    print("   ‚Ä¢ Categoria de Curso ‚Üí categoria_curso + categoria (FK)")
    print("   ‚Ä¢ Sugest√£o ‚Üí titulo + descricao estruturada")
    print()
    print("üåê Acesse a interface para verificar os dados:")
    print("   http://localhost:8000")
    print()
    print("üìã Pr√≥ximos passos:")
    print("   ‚Ä¢ Verificar dados na interface")
    print("   ‚Ä¢ Testar consultas e filtros")
    print("   ‚Ä¢ Configurar usu√°rios de produ√ß√£o")

if __name__ == "__main__":
    main()
